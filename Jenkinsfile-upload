// Jenkins upload pipeline
//
// https://www.jenkins.io/doc/book/pipeline/
//
// Required parameters: RELEASE_NOTES

pipeline {
    // Any agent is fine as all the work happens in plugins.
    agent any

    stages {
        stage('Copy AAB') {
            steps {
                // Wipe the build directory before copying to ensure
                // there are no stale files.
                sh 'rm -rf app/build'
                copyArtifacts(
                    projectName: 'kolibri-installer-android',
                    selector: upstream(fallbackToLastSuccessful: true),
                    filter: 'app/build/outputs/bundle/release/app-release.aab, ' +
                        'app/build/outputs/version-release.json'
                    fingerprintArtifacts: true,
                )
            }
        }

        stage('Upload') {
            steps {
                // A bit of pre-processing is needed, so we need to drop
                // into scripted pipeline mode.
                script {
                    // Make sure release notes have been provided.
                    if (!params.RELEASE_NOTES) {
                        error('RELEASE_NOTES parameter not set')
                    }

                    def releaseNotes = readJSON(text: params.RELEASE_NOTES)
                    androidApkUpload(
                        googleCredentialsId: 'google-play-account',
                        filesPattern: 'app/build/outputs/bundle/release/app-release.aab',
                        trackName: 'internal',
                        recentChangeList: releaseNotes,
                        rolloutPercentage: '100',
                    )
                }
            }
        }
    }

    post {
        always {
            script {
                def version = readJSON(file: 'app/build/outputs/version-release.json')
                buildDescription("${version.versionCode} ${version.versionName} ${version.ekVersion}")
            }
        }

        success {
            script {
                def version = readJSON(file: 'app/build/outputs/version-release.json')
                emailext (
                    to: 'apps@endlessos.org,$DEFAULT_RECIPIENTS',
                    replyTo: 'apps@endlessos.org',
                    subject: "Uploaded org.endlessos.Key " +
                        "${version.versionCode} to internal testing",
                    body: """\
Uploaded org.endlessos.Key ${version.versionCode} ${version.versionName} to internal testing.

See Jenkins job \$PROJECT_NAME build \$BUILD_NUMBER for details.

\$BUILD_URL
"""
                )
            }
        }

        failure {
            emailext (
                to: 'apps@endlessos.org,$DEFAULT_RECIPIENTS',
                replyTo: 'apps@endlessos.org',
                subject: '$DEFAULT_SUBJECT',
                body: '$DEFAULT_CONTENT',
            )
        }
    }
}
