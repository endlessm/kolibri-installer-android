From bd16492ced7a19e3ec70b1d6ce769b6263d27c10 Mon Sep 17 00:00:00 2001
From: Richard Tibbles <richard@learningequality.org>
Date: Fri, 23 Sep 2022 08:00:06 -0700
Subject: [PATCH] By default don't initialize hooks when enabling and disabling
 plugins programmatically.

---
 kolibri/plugins/utils/__init__.py | 21 +++++++++++++--------
 kolibri/utils/cli.py              |  2 +-
 2 files changed, 14 insertions(+), 9 deletions(-)

diff --git a/kolibri/plugins/utils/__init__.py b/kolibri/plugins/utils/__init__.py
index 218401595b..2305082644 100644
--- a/kolibri/plugins/utils/__init__.py
+++ b/kolibri/plugins/utils/__init__.py
@@ -89,7 +89,7 @@ def _import_python_module(plugin_name):
             raise
 
 
-def initialize_plugins_and_hooks(all_classes, plugin_name):
+def initialize_plugins_and_hooks(all_classes, plugin_name, initialize_hooks=True):
     was_configured = django_settings.configured
     plugin_objects = []
     for class_definition in all_classes:
@@ -102,7 +102,7 @@ def initialize_plugins_and_hooks(all_classes, plugin_name):
                         class_definition.__name__, plugin_name
                     )
                 )
-        elif issubclass(class_definition, KolibriHook):
+        elif issubclass(class_definition, KolibriHook) and initialize_hooks:
             class_definition.add_hook_to_registries()
             if not was_configured and django_settings.configured:
                 raise PluginLoadsApp(
@@ -125,12 +125,15 @@ def initialize_plugins_and_hooks(all_classes, plugin_name):
         raise MultiplePlugins("More than one plugin defined in kolibri_plugin module")
 
 
-def initialize_kolibri_plugin(plugin_name):
+def initialize_kolibri_plugin(plugin_name, initialize_hooks=True):
     """
     Try to load kolibri_plugin from given plugin module identifier
     In so doing, it will instantiate the KolibriPlugin object if it
     exists, and also register any hooks found in the module.
 
+    Use the initialize_hooks argument to just retrieve the kolibri plugin without registering
+    its hooks.
+
     :returns: the KolibriPlugin object for the module
     """
     was_configured = django_settings.configured
@@ -170,7 +173,9 @@ def is_plugin_module(x):
             for cls in plugin_module.__dict__.values()
             if is_plugin_module(cls) and isinstance(cls, type)
         ]
-        return initialize_plugins_and_hooks(all_classes, plugin_name)
+        return initialize_plugins_and_hooks(
+            all_classes, plugin_name, initialize_hooks=initialize_hooks
+        )
 
     except ImportError as e:
         # Python 2: message, Python 3: msg
@@ -190,9 +195,9 @@ def is_plugin_module(x):
         raise PluginLoadsApp(msg)
 
 
-def enable_plugin(plugin_name):
+def enable_plugin(plugin_name, initialize_hooks=False):
     try:
-        obj = initialize_kolibri_plugin(plugin_name)
+        obj = initialize_kolibri_plugin(plugin_name, initialize_hooks=initialize_hooks)
         if obj:
             obj.enable()
             return True
@@ -200,9 +205,9 @@ def enable_plugin(plugin_name):
         logger.error(str(e))
 
 
-def disable_plugin(plugin_name):
+def disable_plugin(plugin_name, initialize_hooks=False):
     try:
-        obj = initialize_kolibri_plugin(plugin_name)
+        obj = initialize_kolibri_plugin(plugin_name, initialize_hooks=initialize_hooks)
         if obj:
             obj.disable()
             return True
diff --git a/kolibri/utils/cli.py b/kolibri/utils/cli.py
index bb407ef00d..4ee533c8e5 100644
--- a/kolibri/utils/cli.py
+++ b/kolibri/utils/cli.py
@@ -394,7 +394,7 @@ def enable(plugin_names, default_plugins):
     for name in plugin_names:
         try:
             logger.info("Enabling plugin '{}'".format(name))
-            error = error or not enable_plugin(name)
+            error = error or not enable_plugin(name, initialize_hooks=True)
         except Exception as e:
             error = True
             logger.error("Error enabling plugin '{}', error was: {}".format(name, e))
